{"version":3,"sources":["api/index.js","components/ValidatePage/ValidateSignup.js","actions/validation.js"],"names":["url","validate_url","fetchEvents","axios","get","fetchOldEvents","participateEvent","id","participant","post","subscribe","email","confirmSignup","token","key","confirmUnsub","ValidateSignup","useState","wait","setWait","success","setSuccess","message","setMessage","dispatch","useDispatch","location","useLocation","useParams","useEffect","URLSearchParams","search","call","a","api","res","response","status","data","request","callbackFunc","Container","style","display","justifyContent","height","alignSelf","maxWidth","Grow","in","CircularProgress","Card","Typography","margin","textAlign","ValidateUnsub","ValidateMaster","path","useRouteMatch","component"],"mappings":"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","file":"static/js/8.cd052882.chunk.js","sourcesContent":["import axios from 'axios'\r\n\r\nconst url = 'https://vilkkoni-server.herokuapp.com/events';\r\nconst validate_url = 'https://vilkkoni-server.herokuapp.com/validate';\r\nconst sub_url = 'https://vilkkoni-server.herokuapp.com/sub';\r\n\r\nexport const fetchEvents = () => axios.get(url);\r\nexport const fetchOldEvents = () => axios.get(`${url}/old`);\r\nexport const participateEvent = (id, participant) => axios.post(`${url}/${id}/eventsignup`, participant);\r\nexport const subscribe = (email) => axios.post(`${sub_url}/subscribe`, email);\r\nexport const confirmSignup = (id, token) => axios.post(`${validate_url}/signup/${id}`, {key: token});\r\nexport const confirmUnsub = (token, email) => axios.post(`${validate_url}/unsub/${token}`);","import React, { useEffect, useState } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { Card, CircularProgress, Container, Grow, Typography } from '@material-ui/core';\r\nimport { useParams, useLocation, Switch, Route, useRouteMatch } from 'react-router';\r\nimport { confirmSignup, confirmUnsub } from '../../actions/validation';\r\n\r\n\r\nconst ValidateSignup = () => {\r\n    const [wait, setWait] = useState(true);\r\n    const [success, setSuccess] = useState(false);\r\n    const [message, setMessage] = useState(\"\");\r\n    const dispatch = useDispatch()\r\n    const location = useLocation();\r\n    const { id } = useParams();\r\n\r\n    useEffect(()=>{\r\n        const token = new URLSearchParams(location.search).get(\"token\");\r\n        if (id && token) dispatch(confirmSignup(id, token, callbackFunc))\r\n    }, [id, dispatch, location.search]);\r\n\r\n    const callbackFunc = (res) => {\r\n        setWait(false);\r\n        setMessage(res.data.message);\r\n        if (res.status === 200) setSuccess(true);\r\n    }\r\n\r\n    return (\r\n        <Container style={{display: 'flex', justifyContent: 'center', height: '90vh'}}>\r\n            <div style={{alignSelf: 'center', maxWidth: '50%'}}>\r\n                <Grow in={wait}>\r\n                    <div style={{display: 'flex', justifyContent: 'center'}}>\r\n                        <CircularProgress style={{alignSelf: 'center'}} />\r\n                    </div>\r\n                </Grow>\r\n                <Grow in={!wait}>\r\n                    <Card>\r\n                    {success ? (\r\n                        <div>\r\n                            <Typography style={{margin: '2rem 3rem 0', textAlign: 'center'}}>\r\n                                SUCCESS\r\n                            </Typography>\r\n                            <Typography style={{margin: '2rem', textAlign: 'center'}}>\r\n                                Thank you for confirming your participation \r\n                            </Typography>\r\n                        </div>\r\n                    ) : (\r\n                        <div>\r\n                            <Typography style={{margin: '2rem 3rem 0', textAlign: 'center'}}>\r\n                                FAILURE\r\n                            </Typography>\r\n                            <Typography style={{margin: '2rem', textAlign: 'center'}}>\r\n                                {message}\r\n                            </Typography>\r\n                        </div>\r\n                    )}\r\n                    </Card>\r\n                </Grow>\r\n            </div>\r\n        </Container>\r\n    )\r\n};\r\n\r\nconst ValidateUnsub = () => {\r\n    const [wait, setWait] = useState(true);\r\n    const [success, setSuccess] = useState(false);\r\n    const [message, setMessage] = useState(\"\");\r\n    const dispatch = useDispatch()\r\n    const { token } = useParams();\r\n\r\n    useEffect(()=>{\r\n        if (token) dispatch(confirmUnsub(token, callbackFunc))\r\n    }, [token, dispatch]);\r\n\r\n    const callbackFunc = (res) => {\r\n        setWait(false);\r\n        setMessage(res.data.message);\r\n        if (res.status === 200) setSuccess(true);\r\n    }\r\n\r\n    return (\r\n        <Container style={{display: 'flex', justifyContent: 'center', height: '90vh'}}>\r\n            <div style={{alignSelf: 'center', maxWidth: '50%'}}>\r\n                <Grow in={wait}>\r\n                    <div style={{display: 'flex', justifyContent: 'center'}}>\r\n                        <CircularProgress style={{alignSelf: 'center'}} />\r\n                    </div>\r\n                </Grow>\r\n                <Grow in={!wait}>\r\n                    <Card>\r\n                    {success ? (\r\n                        <div>\r\n                            <Typography style={{margin: '2rem 3rem 0', textAlign: 'center'}}>\r\n                                SUCCESS\r\n                            </Typography>\r\n                            <Typography style={{margin: '2rem', textAlign: 'center'}}>\r\n                                You are now unsubscribed and will no longer receive newsletter emails.\r\n                            </Typography>\r\n                        </div>\r\n                    ) : (\r\n                        <div>\r\n                            <Typography style={{margin: '2rem 3rem 0', textAlign: 'center'}}>\r\n                                FAILURE\r\n                            </Typography>\r\n                            <Typography style={{margin: '2rem', textAlign: 'center'}}>\r\n                                {message}\r\n                            </Typography>\r\n                        </div>\r\n                    )}\r\n                    </Card>\r\n                </Grow>\r\n            </div>\r\n        </Container>\r\n    )\r\n}\r\n\r\nconst ValidateMaster = () => {\r\n    let { path } = useRouteMatch();\r\n\r\n    return (\r\n        <Switch>\r\n            <Route path={`${path}/signup/:id`} component={ValidateSignup} />\r\n            <Route path={`${path}/unsubscribe/:token`} component={ValidateUnsub} />\r\n        </Switch>\r\n    )\r\n}\r\n\r\nexport default ValidateMaster;","import * as api from '../api/index';\r\n\r\nexport const confirmSignup = (id, token, call) => async (dispatch) => {\r\n    try {\r\n        const res = await api.confirmSignup(id, token);\r\n        call(res);\r\n    } catch (error) {\r\n        if (error.response) {\r\n            call({status: error.response.status, data: error.response.data});\r\n        } else if (error.request) {\r\n            call({status: 400, data: {message: \"Invalid request, this probably was not your link\"}});\r\n        }\r\n    }\r\n}\r\n\r\nexport const confirmUnsub = (token, call) => async (dispatch) => {\r\n    try {\r\n        const res = await api.confirmUnsub(token);\r\n        call(res);\r\n    } catch (error) {\r\n        if (error.response) {\r\n            call({status: error.response.status, data: error.response.data});\r\n        } else if (error.request) {\r\n            call({status: 400, data: {message: \"Invalid request, this probably was not your link\"}});\r\n        }\r\n    }\r\n}"],"sourceRoot":""}